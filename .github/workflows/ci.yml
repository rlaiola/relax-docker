---
name: CI

# GitHub Actions Documentation:
# https://docs.github.com/en/actions

# Reusing workflows:
# https://docs.github.com/en/actions/using-workflows/reusing-workflows

on:
  schedule:
    # Daily nightly build at 9:15 AM UTC
    - cron: '15 9 * * *'
    # Weekly rebuild latest on Mondays at 6:15 AM UTC
    - cron: '15 6 * * MON'
  push:
    # Trigger on semver tags
    tags: ['*.*.*']
  workflow_dispatch: {}  # yamllint-friendly empty mapping

env:
  RETRY_LIMIT: 3
  RETRY_DELAY: 60

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  setup-matrix:
    uses: ./.github/workflows/read-matrix.yml
    with:
      matrix-path: matrix.json

  setup-inputs:
    runs-on: ubuntu-latest
    needs:
      - setup-matrix
    outputs:
      tags: ${{ steps.set-inputs.outputs.tags }}
      latest: ${{ steps.set-inputs.outputs.latest }}
      ref: ${{ steps.set-inputs.outputs.ref }}
      relax_repository: ${{ steps.set-inputs.outputs.relax_repository }}
      relax_ref: ${{ steps.set-inputs.outputs.relax_ref }}
      retry_countdown: ${{ steps.set-inputs.outputs.retry_countdown }}
      retry_delay: ${{ steps.set-inputs.outputs.retry_delay }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: '${{ inputs.ref }}'

      - name: Prepare inputs
        id: set-inputs
        run: |
          # Determine latest tag from setup-matrix
          LATEST="${{ needs.setup-matrix.outputs.default_release }}"
          CRON_EVENT="${{ github.event.schedule }}"

          # Compute tags and latest flag
          if [[ "${LATEST}" == "${{ inputs.tags }}" ]] || [[ "${CRON_EVENT}" == '15 6 * * MON' ]]; then
            ret_code=$(git show-ref --tags --verify --quiet "refs/tags/${LATEST}" || echo 1)
            if [[ "${ret_code}" == "1" ]]; then
              echo "Tag ${LATEST} does not exist"
              gh release create "${LATEST}" --title "${LATEST} (beta)" --notes "Automatically generated." --prerelease || echo "Could not create tag/release."
            fi
            SHORT_VERSION=${LATEST%.*}
            TAGS="${LATEST} ${SHORT_VERSION}"
            echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
            echo "latest=true" >> "$GITHUB_OUTPUT"
            echo "ref=${LATEST}" >> "$GITHUB_OUTPUT"
          else
            TAGS="${{ inputs.tags }}"
            if [[ "${CRON_EVENT}" == '15 9 * * *' ]]; then
              TAGS="nightly"
            fi
            if [[ -z "${TAGS}" ]]; then
              TAGS="${GITHUB_REF#refs/*/}"
            fi
            echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
            echo "latest=${{ inputs.latest }}" >> "$GITHUB_OUTPUT"
            echo "ref=${{ inputs.ref }}" >> "$GITHUB_OUTPUT"
          fi

          # Prepare RelaX repository info
          RELAX_REPOSITORY="${{ inputs.relax_repository }}"
          if [[ -z "$RELAX_REPOSITORY" ]]; then
            RELAX_REPOSITORY="${{ needs.setup-matrix.outputs.repository }}"
          fi
          echo "relax_repository=${RELAX_REPOSITORY}" >> "$GITHUB_OUTPUT"

          RELAX_REF="${{ inputs.relax_ref }}"
          if [[ -z "$RELAX_REF" ]]; then
            RELAX_REF="${{ needs.setup-matrix.outputs.ref }}"
          fi
          echo "relax_ref=${RELAX_REF}" >> "$GITHUB_OUTPUT"

          # Retry config
          ATTEMPTS="${{ inputs.attempt_limit }}"
          if [[ -z "$ATTEMPTS" ]]; then
            ATTEMPTS=${{ env.RETRY_LIMIT }}
          fi
          echo "retry_countdown=${ATTEMPTS}" >> "$GITHUB_OUTPUT"

          DELAY="${{ inputs.attempt_delay }}"
          if [[ -z "$DELAY" ]]; then
            DELAY=${{ env.RETRY_DELAY }}
          fi
          echo "retry_delay=${DELAY}" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    uses: rlaiola/ci-templates/.github/workflows/build-images.yml@main  # External repo must exist and be accessible
    needs:
      - setup-matrix
      - setup-inputs
    with:
      images: '[ "relax" ]'
      parents: ${{ needs.setup-matrix.outputs.parent }}
      default_parent: ${{ needs.setup-matrix.outputs.default_parent }}
      platforms: ${{ needs.setup-matrix.outputs.platform }}
      tags: ${{ needs.setup-inputs.outputs.tags }}
      latest: ${{ needs.setup-inputs.outputs.latest }}
      ref: ${{ needs.setup-inputs.outputs.ref }}
      relax_repository: ${{ needs.setup-inputs.outputs.relax_repository }}
      relax_ref: ${{ needs.setup-inputs.outputs.relax_ref }}

  lint:
    uses: rlaiola/ci-templates/.github/workflows/lint-images.yml@main
    needs:
      - setup-matrix
      - setup-inputs
      - build
    with:
      images: '[ "relax" ]'
      parents: ${{ needs.setup-matrix.outputs.parent }}
      platforms: ${{ needs.setup-matrix.outputs.platform }}
      tag: ${{ needs.setup-inputs.outputs.tags }}

  scan:
    uses: rlaiola/ci-templates/.github/workflows/scan-images.yml@main
    needs:
      - setup-matrix
      - setup-inputs
      - build
    with:
      images: '[ "relax" ]'
      parents: ${{ needs.setup-matrix.outputs.parent }}
      platforms: ${{ needs.setup-matrix.outputs.platform }}
      tag: ${{ needs.setup-inputs.outputs.tags }}

  e2e-test:
    uses: ./.github/workflows/e2e-tests.yml  # Local workflow
    needs:
      - setup-matrix
      - setup-inputs
      - build
    with:
      parents: ${{ needs.setup-matrix.outputs.parent }}
      platforms: ${{ needs.setup-matrix.outputs.platform }}
      tag: ${{ needs.setup-inputs.outputs.tags }}

  retry-builds:
    runs-on: ubuntu-latest
    if: failure()
    needs:
      - setup-inputs
      - build
    steps:
      - name: Retry workflow
        run: |
          ATTEMPT=${{ needs.setup-inputs.outputs.retry_countdown }}
          if [[ "$ATTEMPT" -le "0" ]]; then exit 1; fi
          ATTEMPT=$((ATTEMPT-1))
          DELAY=${{ needs.setup-inputs.outputs.retry_delay }}
          sleep $DELAY

          WORKFLOW_ID=$(gh api -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/actions/workflows | \
            jq --arg var "${{ github.workflow }}" '.workflows[] | select(.name == $var) | .id')

          JSON_STRING=$(jq -c -n \
            --arg tag "${{ needs.setup-inputs.outputs.tags }}" \
            --arg limit "$ATTEMPT" \
            --arg delay "$DELAY" \
            '{ref: "${{ github.ref }}", inputs: {tags: $tag, latest: "${{ needs.setup-inputs.outputs.latest }}", ref: "${{ needs.setup-inputs.outputs.ref }}", attempt_limit: $limit, attempt_delay: $delay}}')

          curl -L -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/dispatches \
            -d "$JSON_STRING"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
